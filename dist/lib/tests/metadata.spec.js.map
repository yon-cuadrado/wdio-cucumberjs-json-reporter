{"version":3,"file":"metadata.spec.js","sourceRoot":"","sources":["../../../lib/tests/metadata.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FULL_RUNNER_STATS, SMALL_RUNNER_STATS, WDIO6_RUNNER_STATS } from './__mocks__/mocks';\nimport { Metadata } from '../metadata';\nimport { NOT_KNOWN } from '../constants';\nimport WebDriver from 'webdriver';\nimport { cjson_metadata } from '../models';\n// import jest from 'jest';\n\ndescribe( 'metadata', () => {\n  let metadataClassObject: Metadata;\n  beforeAll( () => {\n    metadataClassObject = new Metadata();\n  } );\n  describe( 'determineAppData', () => {\n    it( 'should return that no app metadata could be determined', () => {\n      expect( metadataClassObject.determineAppData(\n        {} as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the app name and version based on the metadata', () => {\n      expect( metadataClassObject.determineAppData(\n        {} as WebDriver.DesiredCapabilities,\n        {\n          app: {\n            name: 'metadata app name',\n            version: 'metadata version 1.2.3',\n          },\n        } as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the app name based on the config.app', () => {\n      expect( metadataClassObject.determineAppData(\n        {\n          app: 'here/there/app.apk',\n        } as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the app name based on the testobject_app_id', () => {\n      expect( metadataClassObject.determineAppData(\n        {\n          testobject_app_id: '1',\n        } as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n  } );\n\n  describe( 'determineBrowserData', () => {\n    it( 'should return that no browser metadata could be determined', () => {\n      expect( metadataClassObject.determineBrowserData(\n        {} as WebDriver.DesiredCapabilities,\n        {} as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the browser name and version based on the metadata', () => {\n      expect( metadataClassObject.determineBrowserData(\n        {} as WebDriver.DesiredCapabilities,\n        {} as WebDriver.DesiredCapabilities,\n        {\n          browser: {\n            name: 'metadata browser name',\n            version: 'metadata version 1.2.3',\n          },\n        } as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the browser name and version based on the capabilities when version is used', () => {\n      expect( metadataClassObject.determineBrowserData(\n        {\n          browserName: 'capabilities browser name',\n          version: 'capabilities version',\n        } as WebDriver.DesiredCapabilities,\n        {} as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the browser name and version based on the capabilities when browserVersion is used', () => {\n      expect( metadataClassObject.determineBrowserData(\n        {\n          browserName: 'capabilities browser name',\n          browserVersion: 'capabilities browserVersion',\n        } as WebDriver.DesiredCapabilities,\n        {} as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should return that the browser name and version based on the configCapabilities', () => {\n      expect( metadataClassObject.determineBrowserData(\n        {} as WebDriver.DesiredCapabilities,\n        {\n          browserName: 'configCapabilities browser name',\n          browserVersion: 'configCapabilities browser version',\n        } as WebDriver.DesiredCapabilities,\n        {} as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n  } );\n\n  describe( 'determineDeviceName', () => {\n    it( 'should be able to return the device metadata based on the metadata.device', () => {\n      expect( metadataClassObject.determineDeviceName( { device: 'metadata.device' } as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the device metadata based on the current.config.capabilities.deviceName', () => {\n      expect(\n        metadataClassObject.determineDeviceName( {} as cjson_metadata, { deviceName: 'current.config.capabilities.deviceName' } as WebDriver.DesiredCapabilities ),\n      ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the not known deviceName', () => {\n      expect( metadataClassObject.determineDeviceName( {} as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n    } );\n  } );\n\n  describe( 'determinePlatformName', () => {\n    it( 'should be able to return the platform name based on the metadata.platform', () => {\n      expect( metadataClassObject.determinePlatformName(\n        {\n          platform: {\n            name: 'platform.name',\n          },\n        } as cjson_metadata,\n        {} as WebDriver.DesiredCapabilities,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the platform name based on the currentCapabilities.platformName', () => {\n      expect(\n        metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'currentCapabilities.platformName' } as WebDriver.DesiredCapabilities ),\n      ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the platform name based on the currentCapabilities.platformName for mac properly', () => {\n      expect(\n        metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'mac' } as WebDriver.DesiredCapabilities ),\n      ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the platform name based on the currentCapabilities.platformName for windows properly', () => {\n      expect(\n        metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'windows nt' } as WebDriver.DesiredCapabilities ),\n      ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the not known platform name', () => {\n      expect( metadataClassObject.determinePlatformName( {} as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n    } );\n  } );\n\n  describe( 'determinePlatformVersion', () => {\n    it( 'should be able to return the platform version based on the metadata.platform', () => {\n      expect( metadataClassObject.determinePlatformVersion(\n        {\n          platform: {\n            version: 'platform.version',\n          },\n        } as cjson_metadata,\n      ) ).toMatchSnapshot();\n    } );\n\n    it( 'should be able to return the not known platform version', () => {\n      expect( metadataClassObject.determinePlatformVersion( {} as cjson_metadata ) ).toMatchSnapshot();\n    } );\n  } );\n\n  describe( 'determineMetadata', () => {\n    let determineAppDataSpy: jest.SpyInstance; let determineBrowserDataSpy: jest.SpyInstance; let determineDeviceNameSpy: jest.SpyInstance; let determinePlatformNameSpy: jest.SpyInstance;\n    let determinePlatformVersionSpy;\n    const appMockData = {\n      app: {\n        name: 'mock-appName',\n        version: 'mock-appVersion',\n      },\n    };\n    const browserMockData = {\n      browser: {\n        name: 'mock-browserName',\n        version: 'mock-browserVersion',\n      },\n    };\n\n    beforeEach( () => {\n      delete global.browser;\n      global.browser = {\n        options: {\n          requestedCapabilities: {\n            w3cCaps:{\n              alwaysMatch:{\n                foo: true,\n              }\n            }\n          },\n        },\n      } as WebdriverIO.BrowserObject;\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' );\n      determineBrowserDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n      determineDeviceNameSpy = jest.spyOn( metadataClassObject, 'determineDeviceName' ).mockReturnValue( NOT_KNOWN );\n      determinePlatformNameSpy = jest.spyOn( metadataClassObject, 'determinePlatformName' ).mockReturnValue( NOT_KNOWN );\n      determinePlatformVersionSpy = jest.spyOn( metadataClassObject, 'determinePlatformVersion' ).mockReturnValue( NOT_KNOWN );\n    } );\n\n    afterEach( () => {\n      jest.clearAllMocks();\n      delete global.browser;\n    } );\n\n    it( 'should return app metadata based on the currentCapabilities.app', () => {\n      FULL_RUNNER_STATS.capabilities.app = 'current.config.capabilities.app';\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' ).mockReturnValue( appMockData );\n\n      expect( metadataClassObject.determineMetadata( FULL_RUNNER_STATS ) ).toMatchSnapshot();\n\n      expect( determineAppDataSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n\n      delete FULL_RUNNER_STATS.capabilities.app;\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should return app metadata based on the currentCapabilities.testobject_app_id', () => {\n      FULL_RUNNER_STATS.capabilities.testobject_app_id = 'current.config.capabilities.testobject_app_id';\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' ).mockReturnValue( appMockData );\n\n      expect( metadataClassObject.determineMetadata( FULL_RUNNER_STATS ) ).toMatchSnapshot();\n\n      expect( determineAppDataSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n\n      delete FULL_RUNNER_STATS.capabilities.testobject_app_id;\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should return app metadata based on the current.config.capabilities[\\'cjson:metadata\\'].app', () => {\n      FULL_RUNNER_STATS.capabilities.cjson_metadata.app = {\n        'name': 'mock-appName',\n        'version': 'mock-appVersion',\n      };\n\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' ).mockReturnValue( appMockData );\n\n      expect( metadataClassObject.determineMetadata( FULL_RUNNER_STATS ) ).toMatchSnapshot();\n\n      expect( determineAppDataSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n\n      delete FULL_RUNNER_STATS.capabilities.cjson_metadata.app;\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should return metadata based on the requestedCapabilities.w3cCaps.alwaysMatch', () => {\n      global.browser = {\n        options: {\n          requestedCapabilities: {\n            w3cCaps: {\n              alwaysMatch: {\n                'cjson_metadata': {},\n              },\n            },\n          },\n        },\n      } as WebdriverIO.BrowserObject;\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n      expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should return metadata based on the browser.options.capabilities if w3cCaps is empty', () => {\n      global.browser = {\n        options: {\n          requestedCapabilities: {\n            w3cCaps:{\n\n            }\n          },\n          capabilities: {\n            browserName: 'chrome',\n            'cjson_metadata': {},\n          }\n        },\n      } as WebdriverIO.BrowserObject;\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n      expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should return metadata based on the browser.options.capabilities', () => {\n      global.browser = {\n        options: {\n          capabilities: {\n            browserName: 'chrome',\n            'cjson_metadata': {},\n          },\n        },\n\n      } as WebdriverIO.BrowserObject;\n\n      determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n      expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n      determineAppDataSpy.mockClear();\n    } );\n\n    it( 'should call determineBrowserData when there is no way to  determine the app data', () => {\n      metadataClassObject.determineMetadata( SMALL_RUNNER_STATS );\n\n      expect( determineAppDataSpy ).toHaveBeenCalledTimes( 0 );\n      expect( determineBrowserDataSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n    } );\n\n    it( 'should be able to return browser metadata', () => {\n      expect( metadataClassObject.determineMetadata( SMALL_RUNNER_STATS ) ).toMatchSnapshot();\n\n      expect( determineBrowserDataSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n      expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n    } );\n  } );\n} );\n"]}