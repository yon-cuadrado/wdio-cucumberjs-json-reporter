{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../lib/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserData , MetadataObject, cjson_metadata } from './models';\nimport { NOT_KNOWN } from './constants';\nimport { RunnerStats } from '@wdio/reporter';\nimport WebDriver from 'webdriver';\n\nexport class Metadata {\n  /**\n   * ```\n   * Determine the metadata that needs to be added\n   *\n   * @param {object} data instance data\n   *\n   * @returns {\n   *  {\n   *      metadata: {\n   *          app: {\n   *              name: string,\n   *              version: string\n   *          },\n   *          browser: {\n   *              name: string,\n   *              version: string\n   *          },\n   *          device: string,\n   *          platform: {\n   *              name: string,\n   *              version: string\n   *          }\n   *      }\n   *  }\n   * }\n   * ```\n   */\n  public determineMetadata ( data: RunnerStats ): MetadataObject {\n    let instanceData: MetadataObject;\n    const currentCapabilities = data.capabilities;\n    // const capabilities: WebDriver.DesiredCapabilities = browser.options.capabilities as WebDriver.DesiredCapabilities;\n    const optsCaps = browser?.options?.capabilities;\n    // const { capabilities: optsCaps = {}, requestedCapabilities = {} } = browser.options;\n    const currentConfigCapabilities = data?.capabilities;\n    const w3cCaps = browser?.options?.requestedCapabilities ;\n    // const { w3cCaps = {} } = requestedCapabilities;\n    const metadata: cjson_metadata = currentConfigCapabilities?.cjson_metadata // For WDIO V6\n            || w3cCaps?.cjson_metadata // When an app is used to test\n            || optsCaps?.cjson_metadata // devtools\n            || {} as cjson_metadata;\n\n    // When an app is used to test\n    // eslint-disable-next-line @typescript-eslint/tslint/config\n    if ( currentConfigCapabilities?.app || currentConfigCapabilities?.testobject_app_id || metadata?.app ) {\n      instanceData = this.determineAppData( currentConfigCapabilities, metadata );\n    } else {\n      // Then a browser\n      instanceData = this.determineBrowserData( currentCapabilities, currentConfigCapabilities, metadata );\n    }\n\n    return <MetadataObject> {\n      ...instanceData,\n      device: this.determineDeviceName( metadata, currentConfigCapabilities ),\n      platform: {\n        name: this.determinePlatformName( metadata, currentCapabilities ),\n        version: this.determinePlatformVersion( metadata ),\n      },\n    };\n  }\n\n  /**\n   * Determine the device name\n   *\n   * @param {object} metadata\n   * @param {object} currentConfigCapabilities\n   * @return {string}\n   */\n  public determineDeviceName ( metadata: cjson_metadata, currentConfigCapabilities: WebDriver.DesiredCapabilities ): string {\n    return ( metadata?.device || currentConfigCapabilities?.deviceName || `Device name ${NOT_KNOWN}` );\n  }\n\n  /**\n   * Determine the platform name\n   *\n   * @param {object} metadata\n   * @param {object} currentCapabilities\n   * @return {string}\n   */\n  public determinePlatformName ( metadata: cjson_metadata, currentCapabilities: WebDriver.DesiredCapabilities ): string {\n    const currentPlatformName = currentCapabilities?.platformName\n      ? currentCapabilities?.platformName.includes( 'mac' )\n        ? 'osx'\n        : currentCapabilities.platformName.includes( 'windows' )\n          ? 'windows'\n          : currentCapabilities?.platformName\n      : `Platform name ${NOT_KNOWN}`;\n    return ( metadata.platform && metadata?.platform?.name )\n      ? metadata.platform?.name\n      : currentPlatformName;\n  }\n\n  /**\n   * Determine the platform version\n   *\n   * @param {object} metadata\n   * @return {string}\n   */\n  public determinePlatformVersion ( metadata: cjson_metadata ): string {\n    return ( metadata && metadata.platform && metadata.platform?.version )\n      ? metadata.platform.version\n      : `Version ${NOT_KNOWN}`;\n  }\n\n  /**\n   * Determine the app data\n   *\n   * @param {object} currentConfigCapabilities The capabilities from the configured capabilities\n   * @param {object} metadata The custom set capabilities\n   *\n   * @returns {\n   * {\n   * app: {\n   *          name: string,\n   *          version: string,\n   *      },\n   *  }\n   * }\n   */\n  public determineAppData ( currentConfigCapabilities: WebDriver.DesiredCapabilities, metadata: cjson_metadata ): MetadataObject {\n    const metaAppName: string = ( metadata?.app && metadata.app?.name ) ? metadata?.app?.name : 'No metadata.app.name available';\n    const metaAppVersion: string = ( metadata?.app && metadata.app.version ) ? metadata.app.version : 'No metadata.app.version available';\n    const appPath = ( currentConfigCapabilities.app || currentConfigCapabilities.testobject_app_id || metaAppName );\n    const appName = appPath.substring( appPath.replace( '\\\\', '/' ).lastIndexOf( '/' ) ).replace( '/', '' );\n\n    return {\n      app: {\n        name: appName,\n        version: metaAppVersion,\n      },\n    };\n  }\n\n  /**\n   * Determine the browser data\n   *\n   * @param {object} currentCapabilities The capabilities of the current run, that holds the most actual data\n   * @param {object} currentConfigCapabilities The capabilities from the configured capabilities\n   * @param {object} metadata The custom set capabilities\n   *\n   * @returns {\n   *  {\n   *      browser: {\n   *          name: string,\n   *          version: string,\n   *      },\n   *  }\n   * }\n   */\n  public determineBrowserData ( currentCapabilities: WebDriver.DesiredCapabilities, currentConfigCapabilities: WebDriver.DesiredCapabilities, metadata: cjson_metadata ): BrowserData {\n    const browserName = currentCapabilities?.browserName\n            || currentConfigCapabilities?.browserName\n            || ( ( metadata && metadata?.browser && metadata.browser?.name ) ? metadata?.browser?.name : 'No metadata.browser.name available' );\n    const browserVersion = currentCapabilities?.version\n            || currentCapabilities?.browserVersion\n            || currentConfigCapabilities?.browserVersion\n            || ( ( metadata && metadata?.browser && metadata?.browser?.version ) ? metadata?.browser?.version : 'No metadata.browser.version available' );\n\n    return <BrowserData>{\n      browser: {\n        name: browserName,\n        version: browserVersion,\n      }\n    };\n  }\n}\n\n\n"]}