{"version":3,"file":"reporter.js","sourceRoot":"","sources":["../../lib/reporter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AFTER,\n  BEFORE,\n  DEFAULT_JSON_FOLDER,\n  DEFAULT_LANGUAGE,\n  FEATURE,\n  PASSED,\n  //   PENDING,\n  SCENARIO,\n  TEXT_PLAIN,\n} from './constants';\nimport { CucumberJsAttachment, Feature, MetadataObject, Report, Scenario, Step } from './models';\nimport WDIOReporter, { HookStats, RunnerStats, SuiteStats,TestStats, WDIOReporterOptions } from '@wdio/reporter';\nimport { existsSync, outputJsonSync, readJsonSync } from 'fs-extra';\nimport { Metadata } from './metadata';\nimport Utils from './utils';\nimport logger from '@wdio/logger';\nimport { resolve } from 'path';\n\nconst log = logger( 'wdio-multiple-cucumber-html-reporter' );\n\nexport class CucumberJsJsonReporter extends WDIOReporter {\n  public options: Partial<WDIOReporterOptions>;\n  public reporterName: string;\n  public instanceMetadata: MetadataObject;\n  public report: Report;\n  public metadataClassObject: Metadata;\n  public utilsObject: Utils;\n\n  public constructor( options: Partial<WDIOReporterOptions> ) {\n    super( options );\n\n    if ( !options.jsonFolder ) {\n      options.jsonFolder = DEFAULT_JSON_FOLDER;\n      log.info( `The 'jsonFolder' was not set, it has been set to the default '${DEFAULT_JSON_FOLDER}'` );\n    }\n    if ( !options.language ) {\n      options.language = DEFAULT_LANGUAGE;\n      log.info( `The 'language' was not set, it has been set to the default '${DEFAULT_LANGUAGE}'` );\n    }\n\n    this.options = options;\n    this.instanceMetadata = null;\n    this.report = <Report>{};\n\n    this.registerListeners();\n    this.metadataClassObject = new Metadata();\n    this.utilsObject = new Utils();\n  }\n\n  /**\n   * Attach data to the report\n   *\n   * @param {string|object} data\n   * @param {string} type Default is `text/plain`, otherwise what people deliver as a MIME type, like `application/json`, `image/png`\n   */\n  public static attach( data: string, type = TEXT_PLAIN ): void {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    ( process.emit as Function )( 'wdioCucumberJsReporter:attachment', { data, type } );\n  }\n\n  /**\n   * Add a customer listener for the attachments\n   */\n  public registerListeners(): void {\n    process.on( 'wdioCucumberJsReporter:attachment', this.cucumberJsAttachment.bind( this ) );\n  }\n\n  /**\n   * The order of running of the `on*` is the following:\n   * - onRunnerStart\n   * - onSuiteStart (feature)\n   * - onSuiteStart (scenario)\n   * - onHookStart\n   * - onHookEnd\n   * - onTestStart\n   * - onBeforeCommand\n   * - onAfterCommand\n   * - onTestPass\n   * - onHookStart\n   * - onHookEnd\n   * - onSuiteEnd (scenario is done)\n   * - onSuiteEnd (feature is done)\n   * - onRunnerEnd\n   */\n\n  /**\n   * This hook is used to retrieve the browser data, but this is done only once\n   *\n   * @param {object} runnerData\n   */\n  public onRunnerStart( runnerData: RunnerStats ): void {\n    if ( !this.instanceMetadata ) {\n      this.instanceMetadata = this.metadataClassObject.determineMetadata( runnerData );\n    }\n  }\n\n  /**\n   * This hook is called twice:\n   * 1. create the feature\n   * 2. add the scenario to the feature\n   *\n   * @param {object} payload\n   */\n  public onSuiteStart( payload: SuiteStats ): void {\n    if ( !this.report.feature ) {\n      this.report.feature = this.getFeatureDataObject( payload );\n    }\n\n    /* istanbul ignore else */\n    if ( !this.report.feature.metadata ) {\n      this.report.feature = { ...this.report.feature, ...this.instanceMetadata };\n    }\n\n    if( typeof this.report.feature.elements !== 'undefined' ){\n      this.report.feature.elements.push( this.getScenarioDataObject( payload, this.report.feature.id ) );\n    }\n  }\n\n  /**\n   * This one is for the start of the hook and determines if this is a pending `before` or `after` hook.\n   * The data will be equal to a step, so a hook is added as a step.\n   *\n   * @param payload\n   */\n  public onHookStart( payload: HookStats ): void {\n    // There is always a scenario, take the last one\n    const currentSteps = this.getCurrentScenario().steps;\n    payload.state = PASSED;\n    payload.keyword = this.utilsObject.containsSteps( currentSteps, this.options.language ) ? AFTER : BEFORE;\n\n    this.addStepData( payload );\n  }\n\n  /**\n   * This one is for the end of the hook, it directly comes after the onHookStart\n   * A hook is the same  as a 'normal' step, so use the update step\n   *\n   * @param payload\n   */\n  public onHookEnd( payload: HookStats ): void {\n    payload.state = payload.error ? payload.state : PASSED;\n\n    return this.updateStepStatus( payload );\n  }\n\n  /**\n   * This one starts the step, which will be set to pending\n   *\n   * @param {object} payload\n   */\n  public onTestStart( payload: TestStats ): void {\n    this.addStepData( payload );\n  }\n\n  // /**\n  //  * This one starts a command\n  //  *\n  //  * @param payload\n  //  */\n  // onBeforeCommand(payload) {\n  //     // console.log('\\nconst onBeforeCommand= ', JSON.stringify(payload), '\\n')\n  // }\n\n  // /**\n  //  * This is the result of the command\n  //  *\n  //  * @param payload\n  //  */\n  // onAfterCommand(payload) {\n  //     // console.log('\\nconst onAfterCommand= ', JSON.stringify(payload), '\\n')\n  // }\n\n  // onScreenshot(payload) {\n  //     // console.log('\\nconst onScreenshot= ', JSON.stringify(payload), '\\n')\n  // }\n\n  /**\n   * The passed step\n   *\n   * @param payload\n   */\n  public onTestPass( payload: TestStats ): void {\n    this.updateStepStatus( payload );\n  }\n\n  /**\n   * The failed step including the logs\n   *\n   * @param payload\n   */\n  public onTestFail( payload: TestStats ): void {\n    this.updateStepStatus( payload );\n  }\n\n  /**\n   * The skippe step\n   *\n   * @param payload\n   */\n  public onTestSkip( payload: TestStats ): void {\n    this.updateStepStatus( payload );\n  }\n\n  // onTestEnd(payload) {\n  //     console.log('\\nonTestEnd');\n  // }\n\n  // /**\n  //  * Executed twice:\n  //  * - at the end of a scenario\n  //  * - at the end of all scenario's\n  //  *\n  //  * @param payload\n  //  */\n  // onSuiteEnd(payload) {}\n\n  /**\n   * Runner is done, write the file\n   */\n  public onRunnerEnd(): void {\n    const jsonFolder = resolve( process.cwd(), this.options.jsonFolder );\n    const jsonFile = resolve( jsonFolder, `${this.report.feature.id}.json` );\n    const json = [this.report.feature];\n    // Check if there is an existing file, if so concat the data, else add the new\n    const output = existsSync( jsonFile ) ? json.concat( readJsonSync( jsonFile ) ): json;\n\n    outputJsonSync( jsonFile, output );\n  }\n\n  /**\n   * All functions\n   */\n\n  /**\n   * Get the feature data object\n   * ```html\n   * @param {object} featureData\n   *\n   * @returns {\n   *  {\n   *      keyword: string,\n   *      line: number,\n   *      name: string,\n   *      tags: string,\n   *      uri: string,\n   *      elements: Array,\n   *      id: string,\n   *  }\n   * }\n   * ```\n   */\n  public getFeatureDataObject( featureData: SuiteStats ): Feature {\n    const featureName = featureData.title;\n\n    return {\n      keyword: FEATURE,\n      type: featureData.type,\n      description: ( featureData.description || '' ),\n      line: parseInt( featureData.uid.substring( featureName.length, featureData.uid.length ) ,10 ),\n      name: featureName,\n      uri: 'Can not be determined',\n      tags: featureData.tags || [],\n      elements: [],\n      id: featureName.replace( /[\\\\/?%*:|\"<> ]/g, '-' ).toLowerCase(),\n    };\n  }\n\n  /**\n   * Get the scenario data object\n   *\n   * @param {object} scenarioData This is the testdata of the current scenario\n   * @param {string} id scenario id\n   *\n   * @returns {\n   *  {\n   *      keyword: string,\n   *      description: string,\n   *      name: string,\n   *      tags: string,\n   *      id: string,\n   *      steps: Array,\n   *  }\n   * }\n   */\n  public getScenarioDataObject( scenarioData: SuiteStats, id: string ): Scenario {\n    const scenarioName = scenarioData.title;\n\n    return {\n      keyword: SCENARIO,\n      type: scenarioData.type,\n      description: ( scenarioData.description || '' ),\n      name: scenarioName,\n      tags: scenarioData.tags || [],\n      id: `${id};${scenarioData.title.replace( / /g, '-' ).toLowerCase()}`,\n      steps: [],\n    };\n  }\n\n  /**\n   * Get the step data object\n   * ```\n   * @param {object} stepData This is the testdata of the step\n   *\n   * @returns {\n   *  {\n   *      arguments: Array,\n   *      keyword: string,\n   *      name: *,\n   *      result: {\n   *          status: string,\n   *          duration: number\n   *      },\n   *      line: number,\n   *      match: {\n   *          location: string,\n   *      },\n   *  }\n   * }\n   * ```\n   */\n  public getStepDataObject( stepData: TestStats | HookStats ): Step {\n    const keyword = stepData?.keyword\n            || this.utilsObject.keywordStartsWith( stepData.title, this.options.language )\n            || '';\n    const title = ( stepData.title.split( keyword ).pop() || stepData.title || '' ).trim();\n    const stepResult = {\n      arguments: stepData.argument ? [stepData.argument] : [],\n      keyword,\n      name: title,\n      result: {\n        status: stepData.state || '',\n        duration: ( stepData._duration || 0 ) * 1000000,\n        ...this.utilsObject.getFailedMessage( stepData )\n      },\n      line: parseInt( stepData.uid.substring( title.length, stepData.uid.length ), 10 ) || '',\n      match: {\n        location: 'can not be determined with webdriver.io'\n      }\n    };\n\n    return stepResult;\n  }\n\n  /**\n   * Get the current scenario\n   *\n   * @return {object}\n   */\n  public getCurrentScenario(): Scenario {\n    return this.report.feature.elements[this.report.feature.elements.length - 1];\n  }\n\n  /**\n   * Get the current step\n   *\n   * @return {object}\n   */\n  public getCurrentStep(): Step {\n    const currentScenario = this.getCurrentScenario();\n\n    return currentScenario.steps[currentScenario.steps.length - 1];\n  }\n\n  /**\n   * Add step data to the current running scenario\n   *\n   * @param {object} test\n   */\n  public addStepData( test: TestStats | HookStats ): void {\n    // Always add the finished step to the end of the steps\n    // of the last current scenario that is running\n    this.getCurrentScenario().steps.push( this.getStepDataObject( test ) );\n  }\n\n  /**\n   * Add step data to the current running scenario\n   *\n   * @param {object} test\n   */\n  public updateStepStatus( test: TestStats | HookStats ): void {\n    // There is always a scenario, take the last one\n    const currentSteps = this.getCurrentScenario().steps;\n    const currentStepsLength = currentSteps.length;\n    const stepData = this.getStepDataObject( test );\n\n    currentSteps[currentStepsLength - 1] = { ...this.getCurrentStep(), ...stepData };\n  }\n\n\n\n  /**\n   * Add the attachment to the result\n   *\n   * @param {string|object} data\n   * @param {string} type\n   */\n  public cucumberJsAttachment( attachment: CucumberJsAttachment ): void {\n    // The attachment can be added to the current running scenario step\n    const currentStep = this.getCurrentStep();\n    const embeddings = {\n      data: attachment?.data,\n      mime_type: attachment.type,\n    };\n\n    // Check if there is an embedding, if not, add it, else push it\n    if ( !currentStep.embeddings ) {\n      currentStep.embeddings = [embeddings];\n    } else {\n      currentStep.embeddings.push( embeddings );\n    }\n  }\n}\n\n// CucumberJsJsonReporter.name = 'cucumberjs-json';\nexport default CucumberJsJsonReporter;\n"]}